{"version":3,"sources":["models/Room.tsx","context/globalContext.js","screens/Home.tsx","screens/Lobby.tsx","service/HttpService.ts","screens/CreateRoom.tsx","screens/WaitingRoom.tsx","models/Game.ts","components/game/UpcomingQuestion.tsx","utils/EventEmitter.ts","components/game/GameQuestion.tsx","screens/Game.tsx","models/UpcomingQuestionModel.tsx","models/GameQuestionModel.tsx","index.tsx","App.tsx"],"names":["State","PlayerReadyStatus","convertRoomModelBE2FE","backendModel","key","id","name","numPlayers","players","length","topic","status","state","convertRoomModelListBE2FE","backendModels","map","model","index","GlobalContext","React","createContext","useGlobalContext","useContext","GlobalContextProvider","children","useState","socket","setSocket","rooms","setRooms","setRoomList","data","console","log","useEffect","io","window","location","hostname","on","Provider","value","layout","labelCol","span","wrapperCol","tailLayout","offset","gridContainer","width","height","display","gridTemplateAreas","margin","headerStyle","gridArea","justifySelf","alignSelf","nameStyle","Home","redirectToLobby","setRedirectToLobby","to","style","initialValues","onFinish","values","user","username","emit","onFinishFailed","errorInfo","Item","label","rules","required","message","type","htmlType","roomListStyle","createRoomButtonStyle","Lobby","redirectToCreateRoom","setRedirectToCreateRoom","redirectToWaitingRoom","setRedirectToWaitingRoom","selectedRoom","setSelectedRoom","spectateGame","joinGame","room","event","joinedEvent","gameId","success","alert","columns","title","dataIndex","render","text","record","GAME","LOBBY","onClick","bind","undefined","pathname","dataSource","httpService","httpClient","axios","create","baseURL","responseType","headers","this","get","response","topics","Option","Select","createRoomFormStyle","CreateRoom","setTopics","setRoom","a","getTopicsList","autoJoinRoom","setup","roomName","fileId","placeholder","onChange","allowClear","item","waitingRoomStyle","WaitingRoom","routerState","game","setGame","users","setUsers","redirectToGame","setRedirectToGame","updateUserList","startGame","passedRoom","setUp","PlayerComponent","ready","READY","props","fontSize","CheckCircleOutlined","color","LoadingOutlined","reformatQuestionsByValue","questions","obj","forEach","question","push","flexContainer","border","flexDirection","alignItems","justifyContent","UpcomingQuestion","upcomingQuestionModel","category","emitter","EventEmitter","parentContainer","answersFlexContainer","notificationBox","GameQuestion","gameQuestionModel","answers","stableNotificationMessages","notificationMessages","setNotificationMessages","answerListRef","createRef","handleCorrectAnswer","playerName","correctAnswer","playerId","concat","emitEvent","highlightAnswer","handleIncorrectAnswer","incorrectAnswer","handleAllIncorrectAnswers","answerChoice","isCorrect","number","indexOf","toUpperCase","current","classList","add","answerKeyPressListener","keyCodePressed","which","keyCode","stringKey","String","fromCharCode","numberPressed","parseInt","exception","letterPressed","charAt","Object","keys","includes","gaveAnswerEvent","answer","document","addEventListener","ref","letterChoice","uuidv4","NotificationBox","messages","notificationMsg","useStyles","makeStyles","table","minWidth","cell","borderCollapse","controller","backgroundColor","blankCell","cursor","maxWidth","gridTemplateRows","position","top","left","transform","scoreBoardStyle","innerComponentStyle","gameBoardStyle","Game","screen","setScreen","updateGame","handleGameOver","winners","winnerNames","winner","join","renderUpcomingQuestionScreen","questionScreen","renderQuestionScreen","renderGameBoard","BoardScreen","file","addListener","ScoreBoard","controllingPlayerId","GameBoard","clickedGameCell","clickCellEvent","classes","categories","categoriesSeen","extractCategories","valueIndexedQuestions","TableContainer","component","Paper","Table","className","aria-label","TableHead","TableRow","TableCell","align","TableBody","amountKey","classNm","hasBeenAnswered","player","score","defaultUpcoming","defaultGameQuestion","ReactDOM","exact","path","getElementById"],"mappings":"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","file":"static/js/main.291f7636.chunk.js","sourcesContent":["export interface RoomBackendModel {\n    id: number;\n    name: string | undefined;\n    topic: string | undefined;\n    file: File;\n    players: Player[];\n    controllingPlayerId: string;\n    state: State;\n}\n\nexport interface RoomFrontendModel {\n    key: number\n    id: number\n    name: String | undefined\n    numPlayers: number | undefined\n    topic: String | undefined\n    status: State\n}\n\nexport function convertRoomModelBE2FE (backendModel: RoomBackendModel, key: number): RoomFrontendModel {\n    let frontendModel: RoomFrontendModel = {\n        key: key,\n        id: backendModel.id,\n        name: backendModel.name,\n        numPlayers: backendModel.players.length,\n        topic: backendModel.topic,\n        status: backendModel.state\n    }\n\n    return frontendModel;\n}\n\nexport function convertRoomModelListBE2FE (backendModels: RoomBackendModel[]): RoomFrontendModel[] {\n    let frontendModels = backendModels.map(function(model, index){\n        return convertRoomModelBE2FE(model, index);\n    })\n\n    return frontendModels;\n}\n\nexport interface Player {\n    name: string;\n    score: number;\n    id: string;\n    status: PlayerReadyStatus\n}\n\nexport enum State {\n    LOBBY,\n    GAME\n}\n\nexport enum PlayerReadyStatus {\n    READY,\n    WAITING\n}\n\ninterface File {\n    id: number;\n    name: string | undefined;\n    questions: Question[];\n}\n\nexport interface Question {\n    category: string;\n    value: string;\n    question: string;\n    answers: Answer;\n    correctAnswer: string;\n    hasBeenAnswered: Boolean;\n}\n\ninterface Answer {\n    // This is syntax for when definining a hashmap type.\n    [key: string] : string;\n}","import React, { useState, useEffect, useContext } from \"react\";\nimport { RoomFrontendModel, RoomBackendModel, convertRoomModelListBE2FE, State } from '../models/Room';\nimport io from \"socket.io-client\";\n\n// Create context and create hook for it\nconst GlobalContext = React.createContext()\n\n// Create hook for context. Will be consumed\nexport function useGlobalContext() {\n    return useContext(GlobalContext)\n}\n\n// Create Provider (React Component) for context. Will be consumed\nexport function GlobalContextProvider({children}) {\n    const [socket, setSocket] = useState();\n    const [rooms, setRooms] = useState(); //type: RoomFrontendModel[]\n\n    //Initialization logic\n    useEffect(() => {\n        console.log(\"Called useEffect\");\n        \n        //Connect socket\n        const socket = io(`http://${window.location.hostname}:3001`);\n        setSocket(socket);\n        console.log(\"Client socket: \", socket);\n\n        //Create and expose a TypeSocket (custom) class that wraps socketio methods.\n\n        //Add global listeners here. \n        socket.on(\"roomListUpdated\", setRoomList);\n\n    }, [])\n\n    function setRoomList(data){ // data: RoomBackendModel[]\n        //Set the rooms state object\n        console.log(\"Converted frontend room models: \", convertRoomModelListBE2FE(data));\n        setRooms(convertRoomModelListBE2FE(data))\n      }\n\n    //Return back provider exposing global data and methods. Could create a socket.on/emit proxy method\n    return (\n        <GlobalContext.Provider value={{\n            socket,\n            rooms\n        }}>\n            {children}\n        </GlobalContext.Provider>\n    )\n}","import React, { useState } from 'react';\nimport { Button } from 'antd';\n\nimport { Form, Input } from 'antd';\nimport { useGlobalContext } from '../context/globalContext';\nimport { UserCreated } from '../models/Events';\nimport { Redirect } from 'react-router';\n\nconst layout = {\n  labelCol: { span: 8 },\n  wrapperCol: { span: 16 },\n};\n\nconst tailLayout = {\n  wrapperCol: { offset: 8, span: 16 },\n};\n\n// Styles\nconst gridContainer = {\n  width: \"80VW\",\n  height: \"80VH\",\n  display: \"grid\",\n  gridTemplateAreas: \n  `\n      \"header header header header\"\n      \"name   name   name   name\"\n      \"name   name   name   name\"\n      \"lobby  lobby  lobby  lobby\"\n  `,\n  margin: \"auto\", //This centers horizontally\n  // border: \"3px solid black\"\n}\n\nconst headerStyle = {\n  gridArea: \"header\",\n  // border: \"3px solid black\",\n  justifySelf: \"center\",\n  alignSelf: \"center\"\n};\n\nconst nameStyle = {\n  gridArea: \"name\",\n  // border: \"3px solid black\",\n  justifySelf: \"center\"\n}\n\n\nexport default function Home() {\n  const { socket } = useGlobalContext();\n  const [redirectToLobby, setRedirectToLobby] = useState<Boolean>(); \n\n  const onFinish = (values: any) => {\n    console.log('Success:', values);\n  \n    // Create a userJoined Event\n    const user: UserCreated = {\n      name: values.username\n    }\n\n    // Convert to json and emit. Looks like I did not even have to convert to json\n    socket.emit(\"userCreated\", user);\n\n    // Go on to the next screen - lobby. Two options setRedirect to true and use declarative <Redirect> or react router api. Use first method\n    setRedirectToLobby(true);\n  };\n  \n  const onFinishFailed = (errorInfo: any) => {\n    console.log('Failed:', errorInfo);\n  };\n\n  //Redirect to lobby when set\n  if (redirectToLobby){\n    return <Redirect to={'/lobby'}/>\n  }\n\n  return (\n    <div style={gridContainer}>\n\n      {/* HEADING */}\n      <h1 style={headerStyle}>Welcome to Multi-Player Jeopardy</h1>\n\n      {/* NAME INPUT */}\n      <div style={nameStyle}>\n        <Form\n          {...layout}\n          name=\"basic\"\n          initialValues={{}}\n          onFinish={onFinish}\n          onFinishFailed={onFinishFailed} >\n\n            <Form.Item\n              label=\"Username\"\n              name=\"username\"\n              rules={[{ required: true, message: 'Please input your username!' }]}>\n              <Input />\n            </Form.Item>\n\n            <br/> <br/> <br/>\n\n            <Form.Item {...tailLayout}>\n              <Button type=\"primary\" htmlType=\"submit\">\n                Enter Lobby\n              </Button>\n            </Form.Item>\n          </Form>\n        </div>\n\n    </div>\n  );\n}","import React, { useState, useEffect, MouseEvent } from 'react';\n\nimport { Table, Button } from 'antd';\nimport { useGlobalContext } from '../context/globalContext';\nimport { RoomFrontendModel, RoomBackendModel, convertRoomModelListBE2FE, State } from '../models/Room';\nimport { Redirect } from 'react-router';\nimport { UserJoinedGame } from '../models/Events';\n\n\n// Styles\nconst gridContainer = {\n  width: \"80VW\",\n  height: \"80VH\",\n  display: \"grid\",\n  gridTemplateAreas: \n  `\n      \"header header header header\"\n      \"roomList   roomList   roomList   roomList\"\n      \"roomList   roomList   roomList   roomList\"\n      \"createRoom  createRoom  createRoom  createRoom\"\n  `,\n  margin: \"auto\", //This centers horizontally and seems to center children too.\n  // border: \"3px solid black\"\n}\n\nconst headerStyle = {\n  gridArea: \"header\",\n  // border: \"3px solid black\",\n  justifySelf: \"center\",\n  alignSelf: \"center\"\n};\n\nconst roomListStyle = {\n  gridArea: \"roomList\",\n  // border: \"3px solid black\",\n  justifySelf: \"center\",\n  // alignSelf: \"center\"\n};\n\nconst createRoomButtonStyle = {\n  gridArea: \"createRoom\",\n  // border: \"3px solid black\",\n  justifySelf: \"center\",\n  // alignSelf: \"center\"\n};\n\nexport default function Lobby() {\n\n  const { socket, rooms } = useGlobalContext(); //rooms: RoomFrontendModel[]\n  const [redirectToCreateRoom, setRedirectToCreateRoom] = useState<Boolean>();\n  const [redirectToWaitingRoom, setRedirectToWaitingRoom] = useState<Boolean>();\n  const [selectedRoom, setSelectedRoom] = useState<RoomFrontendModel>();\n\n  function openCreateRoom(){\n    console.log(\"Clicked create room\")\n    setRedirectToCreateRoom(true);\n  }\n\n  if (redirectToCreateRoom){\n    return <Redirect to={\"/create-room\"}/>\n  }\n\n  function spectateGame(){\n    console.log(\"Spectating games not implemented yet...\")\n  }\n\n  function joinGame(room: RoomFrontendModel, event: MouseEvent<HTMLButtonElement>){\n    console.log(\"Joining waiting room...\")\n    console.log(\"Game: \", room)\n\n    //Move to waiting room - where will join the game\n    setSelectedRoom(room);\n\n    let joinedEvent: UserJoinedGame = {\n      gameId: room.id\n    }\n\n    //Emit event to add player to game\n    socket.emit(\"userJoinedGame\", joinedEvent, function(success: Boolean){\n      if (success){\n        //Move to waiting room - where will join the game\n        setRedirectToWaitingRoom(true);\n      }\n      else {\n        alert(\"Joining game failed. Please try again.\")\n      } \n    })\n\n  }\n\n  const columns = [\n    {\n      title: 'Name',\n      dataIndex: 'name',\n      key: 'name',\n    },\n    {\n      title: 'Players',\n      dataIndex: 'numPlayers',\n      key: 'numPlayers',\n    },\n    {\n      title: 'Topic',\n      dataIndex: 'topic',\n      key: 'topic',\n    },\n    {\n      title: 'Status',\n      dataIndex: 'status',\n      key: 'status',\n      render: function(text: any, record: RoomFrontendModel, index: any){\n        switch(record.status) {\n          case State.GAME:\n            return \"In Game\"\n          case State.LOBBY:\n            return \"In Lobby\"\n        }\n      }\n    },\n    {\n      title: 'Action',\n      render: function(text: any, record: RoomFrontendModel, index: any){\n        // console.log(\"Text: \", text, \"Record: \", record, \"Index: \", index)\n        if (record.status === State.GAME){\n          return (\n            <Button onClick={spectateGame}>Spectate</Button>\n          )\n        }\n        else if (record.status === State.LOBBY) {\n          return (\n            <Button type=\"primary\" onClick={joinGame.bind(joinGame, record)}>Join</Button>\n          )\n        }\n      }\n    }\n  ];\n\n  if (redirectToWaitingRoom && selectedRoom !== undefined){\n      return <Redirect to={{\n        pathname: \"/waiting-room\",\n        state: {\n          ...selectedRoom\n          // room: selectedRoom, \n          // gameId: selectedRoom.id,\n          // name: selectedRoom.name\n        } //Could alternatively use query params instead\n      }}/>\n  }\n\n  return (\n    <div style={gridContainer}>\n\n      {/* HEADING */}\n      <h1 style={headerStyle}>Welcome to the Lobby</h1>\n\n      {/* ROOM TABLE */}\n      <div style={roomListStyle}>\n        <Table columns={columns} dataSource={rooms}/>\n      </div>\n\n      <div style={createRoomButtonStyle}>\n        <Button type=\"danger\" onClick={openCreateRoom}>Create Room</Button>\n      </div>\n\n    </div>\n  );\n}","import axios, { AxiosError } from \"axios\";\nimport { TopicBackendModel } from \"../models/Topic\";\nimport { ServerError } from \"../models/ServerError\";\n\nclass HttpService {\n    //Axios client\n    httpClient = axios.create({\n        baseURL: 'http://localhost:3001',\n        responseType: 'json',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n    //Operations\n    async getTopicsList(): Promise<TopicBackendModel[]> {\n        try {\n            const response = await this.httpClient.get<TopicBackendModel[]>('/topics');\n            const topics = response.data;\n            return topics;\n\n            //Suppose could have global exception handling? Right now only returning body, not http code\n          } \n          catch (err) {\n            if (err && err.response) {\n              const axiosError = err as AxiosError<ServerError>\n              //return axiosError.response.data;\n            }\n            \n            throw err;\n          }\n    }\n\n}\n\nlet httpService = new HttpService();\n\nexport { httpService }","import React, { useState, useEffect } from 'react';\nimport { Form, Input, Select, Button, Upload, Divider } from 'antd';\nimport { UploadOutlined } from '@ant-design/icons';\nimport { TopicBackendModel } from '../models/Topic';\nimport { httpService } from '../service/HttpService';\nimport { RoomCreated, UserJoinedGame } from '../models/Events';\nimport { useGlobalContext } from '../context/globalContext';\nimport { Redirect } from 'react-router';\nimport { RoomFrontendModel, RoomBackendModel, convertRoomModelBE2FE } from '../models/Room';\n\nconst { Option } = Select;\n\n// const {  } = Form\n\nconst layout = {\n  labelCol: { span: 8 },\n  wrapperCol: { span: 16 },\n};\n\nconst tailLayout = {\n  wrapperCol: { offset: 8, span: 16 },\n};\n\n// Styles\nconst gridContainer = {\n  width: \"80VW\",\n  height: \"80VH\",\n  display: \"grid\",\n  gridTemplateAreas: \n  `\n      \"header header header header\"\n      \"createRoom   createRoom   createRoom   createRoom\"\n      \"createRoom   createRoom   createRoom   createRoom\"\n      \"create  create  create  create\"\n  `,\n  margin: \"auto\", //This centers horizontally and seems to center children too.\n  // border: \"3px solid black\"\n}\n\nconst headerStyle = {\n  gridArea: \"header\",\n  // border: \"3px solid black\",\n  justifySelf: \"center\",\n  alignSelf: \"center\"\n};\n\nconst createRoomFormStyle = {\n  gridArea: \"createRoom\",\n  // border: \"3px solid black\",\n  justifySelf: \"center\"\n}\n\nexport default function CreateRoom() {\n\n  let { socket } = useGlobalContext(); \n\n  const [topics, setTopics] = useState<TopicBackendModel[]>(); \n  const [room, setRoom] = useState<RoomFrontendModel>(); \n  const [redirectToLobby, setRedirectToLobby] = useState<Boolean>(); \n  const [redirectToWaitingRoom, setRedirectToWaitingRoom] = useState<Boolean>(); \n\n  //Initialization logic, getting topics. Consider storing globally once.\n  useEffect(() => {\n    setup()\n  }, [])\n\n  async function setup(){\n    console.log(\"Getting list of topics...\");\n\n    //Make HTTP call with typed axios. Can be a service. Either use await or read the returned promise\n    let response: TopicBackendModel[] = await httpService.getTopicsList();\n    console.log(\"topics: \", response);\n\n    //Use topics to construct select? Or maybe just set topics and read in select\n    setTopics(response);\n\n    //Set up listener for created room response\n    socket.on(\"createdRoomResponse\", autoJoinRoom)\n  }\n\n  const onFinish = (values: any) => {\n    console.log('Success:', values);\n  \n    //Send request to create a room\n    let room: RoomCreated = {\n      roomName: values.roomName,\n      fileId: values.topic\n    }\n  \n    socket.emit(\"roomCreated\", room);\n  \n  };\n  \n  const onFinishFailed = (errorInfo: any) => {\n    console.log('Failed:', errorInfo);\n  };\n\n  function autoJoinRoom(room: RoomBackendModel){\n    //Move into room screen - auto \"join\" - Set redirect\n    setRoom(convertRoomModelBE2FE(room, room.id));\n\n    let joinedEvent: UserJoinedGame = {\n      gameId: room.id\n    }\n\n    //Emit event to add player to game\n    socket.emit(\"userJoinedGame\", joinedEvent, function(success: Boolean){\n      if (success){\n        //Move to waiting room - where will join the game\n        setRedirectToWaitingRoom(true);\n      }\n      else {\n        alert(\"Joining game failed. Please try again.\")\n      } \n    })\n  }\n\n  function goBackToLobby(){\n    console.log(\"Clicked go back to lobby\")\n    setRedirectToLobby(true);\n  }\n\n  if (redirectToWaitingRoom && room !== undefined){\n    return <Redirect to={{\n      pathname: \"/waiting-room\",\n      state: {\n        ...room\n      } //Could alternatively use query params instead\n    }}/>\n}\n\n  if (redirectToLobby){\n    return <Redirect to={\"/lobby\"}/>\n  }\n\n  return (\n    <div style={gridContainer}>\n\n      {/* HEADING */}\n      <h1 style={headerStyle}>Create Your Room</h1>\n\n      {/* NAME INPUT */}\n      <div style={createRoomFormStyle}>\n        <Form\n          {...layout}\n          name=\"basic\"\n          initialValues={{}}\n          onFinish={onFinish}\n          onFinishFailed={onFinishFailed} >\n\n          <Form.Item\n            label=\"Room Name\"\n            name=\"roomName\"\n            rules={[{ required: true, message: 'Please enter room name!' }]}>\n            <Input />\n          </Form.Item>\n\n          <Form.Item\n            label=\"Topic\"\n            name=\"topic\"\n            rules={[{ required: true, message: 'Please select from the available topics!' }]}>\n            <Select\n              placeholder=\"Choose topic\"\n              onChange={() => {}}\n              allowClear>\n                {topics ? \n                  topics.map(item => {\n                    return <Option value={item.fileId} key={item.fileId}>{item.topic}</Option>\n                  }) \n                  : \n                  <Option value=\"empty\">Loading...</Option>}\n            </Select>\n          </Form.Item>\n\n          <br/> <br/> <br/>\n\n\n          <Form.Item {...tailLayout}>\n            <Button type=\"default\" onClick={goBackToLobby}>\n              Back\n            </Button>\n\n            <Divider type=\"vertical\" />\n            \n            <Button type=\"primary\" htmlType=\"submit\">\n              Create\n            </Button>\n          </Form.Item>\n\n        </Form>\n      </div>\n\n    </div>\n  );\n}","import React, { useEffect, useState } from 'react';\n\nimport { Button, Divider } from \"antd\";\n\nimport { CheckCircleOutlined, LoadingOutlined } from '@ant-design/icons'\nimport { RoomFrontendModel, Player, PlayerReadyStatus, RoomBackendModel } from '../models/Room';\nimport { RouterProps, RouteComponentProps, Redirect } from 'react-router';\nimport { useGlobalContext } from '../context/globalContext';\nimport { UserJoinedGame } from '../models/Events';\n\n// Styles\nconst gridContainer = {\n  width: \"80VW\",\n  height: \"80VH\",\n  display: \"grid\",\n  gridTemplateAreas: \n  `\n      \"header header header header\"\n      \"waitingRoom   waitingRoom   waitingRoom   waitingRoom\"\n      \"waitingRoom   waitingRoom   waitingRoom   waitingRoom\"\n      \"create  create  create  create\"\n  `,\n  margin: \"auto\", //This centers horizontally and seems to center children too.\n  // border: \"3px solid black\"\n}\n\nconst headerStyle = {\n  gridArea: \"header\",\n  // border: \"3px solid black\",\n  justifySelf: \"center\",\n  alignSelf: \"center\"\n};\n\nconst waitingRoomStyle = {\n  gridArea: \"waitingRoom\",\n  // border: \"3px solid black\",\n  // width: \"50%\",\n  justifySelf: \"center\",\n  // alignSelf: \"center\"\n};\n\n\nexport default function WaitingRoom(routerState: RouteComponentProps) {\n  const { socket } = useGlobalContext();\n  const [room, setRoom] = useState<RoomFrontendModel>();\n  const [game, setGame] = useState<RoomBackendModel>();\n  const [users, setUsers] = useState<Player[]>();\n  const [redirectToLobby, setRedirectToLobby] = useState<Boolean>();\n  const [redirectToGame, setRedirectToGame] = useState<Boolean>();\n\n  //Initialization logic\n  useEffect(function(){\n    setUp();\n  }, [])\n\n  function setUp(){\n    //Hard cast since I expect this type\n    const passedRoom: RoomFrontendModel = routerState.location.state as RoomFrontendModel\n    console.log(\"Room: \", passedRoom);\n\n    setRoom(passedRoom);\n\n    let joinedEvent: UserJoinedGame = {\n      gameId: passedRoom.id\n    }\n\n    /*Hmm.. I see the difficulty that will not get an inital user list when joining. Could be passed in..\n      This actually resulted in a react warning that can't perform update on unmounted component,\n      still suprised it works and the initial user list is shown as opposed to when another user joins or leaves.\n    */\n\n    //Set up socket listeners for new players joining, leaving, etc... Emitted for all players in this game\n    socket.on(\"userListUpdated\", updateUserList)\n\n    socket.on(\"startGame\", startGame)\n  }\n\n  function updateUserList(users: Player[]){ //Will pass all users in game.\n    console.log(\"Users: \", users);\n    setUsers(users);\n  }\n\n  function readyUp(){\n    socket.emit(\"playerReadiedUp\");\n  }\n\n  function leaveRoom(){\n    socket.emit(\"playerLeftRoom\", function(success: boolean){\n      if (success === true){\n        //Go back to lobby\n        setRedirectToLobby(true);\n      }\n      else {\n        //Alert player leaving failed so try again.\n        alert(\"Leaving failed. Please try again.\")\n      }\n    });\n  }\n\n  function startGame(){\n    /*Get full game data and navigate to game board screen*/\n\n    //Make api call to get the full game data - Could be socket endpoint too...\n    socket.emit(\"currentRoomRequested\", function(game: RoomBackendModel){\n      setGame(game);\n      setRedirectToGame(true);\n    })\n    \n  }\n\n  if (redirectToLobby){\n    return <Redirect to={\"/lobby\"}/>\n  }\n\n  if (redirectToGame && game !== undefined){\n    return <Redirect to={{\n      pathname: \"/game-board\",\n      state: {\n        ...game\n      },\n    }}/>\n  }\n\n  return (\n    <div style={gridContainer}>\n\n      {/* HEADING */}\n    <h1 style={headerStyle}> {room ? room.name : \"Room\"} </h1>\n\n    <div style={waitingRoomStyle}>\n      {\n        users ?\n          users.map(user => {\n            return <PlayerComponent name={`${user.name}`} ready={user.status === PlayerReadyStatus.READY}></PlayerComponent>\n          })\n          :\n          \"No players currently in room...\"\n      }\n\n\n      <br/><br/><br/>\n      <Button type=\"default\" onClick={leaveRoom}>\n        LEAVE\n      </Button>\n\n      <Divider type=\"vertical\" />\n      \n      <Button type=\"primary\" onClick={readyUp}>\n        READY\n      </Button>\n    </div>\n    \n    </div>\n  );\n}\n\n\nfunction PlayerComponent(props: any){\n  const name: String = props.name\n  const ready: Boolean = props.ready\n\n  return (\n    <div>\n      {/* <Avatar size=\"large\" style={{ color: 'white', backgroundColor: 'blue' }}> {name.substring(0,2)} </Avatar>  */}\n      <span style={{ fontSize: '24px'}}> {name} </span>\n      {ready ? <CheckCircleOutlined style={{ fontSize: '24px', color: 'green' }}/> : <LoadingOutlined style={{ fontSize: '24px', color: 'blue' }}/>}\n    </div>\n  )\n}","import { RoomBackendModel, Question } from \"./Room\"\nimport { v4 as uuidv4 } from 'uuid';\n\nexport type UpcomingQuestionModel = {\n    category: String\n    value: Number\n}\n\nexport const defaultUpcoming: UpcomingQuestionModel = {\n    category: \"Default\",\n    value: 400\n}\n\nexport type GameQuestionModel = {\n    question: String\n    answers: String[]\n}\n\nexport const defaultGameQuestion: GameQuestionModel = {\n    question: \"Who was the first woman?\",\n    answers: [\"Abel\", \"Leah\", \"Rachel\", \"Eve\"]\n}\n\nexport interface ScoreBoardModel {\n    // columns: ScoreBoardColumn[]\n    // data: ScoreBoardData[]\n    columns: any[]\n    data: any[]\n}\n\nexport interface GameBoardModel {\n    columns: any[]\n    data: any[]\n}\n\ninterface ScoreBoardColumn {\n    title: string\n    dataIndex: string,\n    key: string,\n}\n\ninterface ScoreBoardData { //So I can't use typing on this..... since dynamically determined...\n\n}\n\n//Examples - Will have to dynamically generate these\nexport const hardcodedScoreBoardColumns = [\n    {\n        title: 'Ferdinand',\n        dataIndex: 'ferdinand',\n        key: 'ferdinand',\n        //Rename to .tsx if want to use jsx...\n        // render: function(text: any, record: any, index: any){\n        //     return (\n        //         <a onClick={this.cellClicked}></a> //Use target within cellClicked to determine which clicked.\n        //     )\n        // }\n      },\n    {\n        title: 'Eugene',\n        dataIndex: 'eugene',\n        key: 'eugene',\n        onCell: (record: any) => ({\n            onClick() { alert(`Clicked ${record.name}`) },\n        }),\n    }\n];\n\nexport const hardcodedScoreBoardData = [\n    // Each object represents a row\n    {\n        key: '1',\n        ferdinand: \"$600\",\n        eugene: \"$400\",\n    }\n];\n\nexport const hardcodedGameBoardData = [\n    // Each object represents a row\n    {\n        key: '1',\n        Genesis: \"$200\",\n        Exodus: \"$200\",\n        Leviticus: \"$200\",\n        Duet: \"$200\",\n        Numbers: \"$200\",\n    },\n    {\n        key: '2',\n        Genesis: \"$400\",\n        Exodus: \"$400\",\n        Leviticus: \"$400\",\n        Duet: \"$400\",\n        Numbers: \"$400\",\n    }\n];\n\n//Conversion functions\nexport function convertRoomModelBE2ScoreBoard(room: RoomBackendModel | undefined): ScoreBoardModel {\n    let scoreBoard: ScoreBoardModel = {\n        columns: [],\n        data: []\n    };\n\n    //Create rows, will only be one\n    let dataObject: any = {}\n    dataObject.key = '1';\n\n    if ( room == undefined) return scoreBoard;\n\n    //Iterate through players\n    room.players.forEach((player, index) => {\n        //Add a column per player\n        scoreBoard.columns.push({\n            title: player.name,\n            dataIndex: index.toString(),\n            key: index.toString()\n        })\n\n        //Add in row data\n        dataObject[index.toString()] = player.score;\n    });\n\n    scoreBoard.data.push(dataObject);\n\n    return scoreBoard;\n}\n\nexport function convertRoomModelBE2GameBoard(room: RoomBackendModel | undefined): GameBoardModel {\n    let gameBoard: GameBoardModel = {\n        columns: [],\n        data: []\n    };\n\n    if ( room == undefined) return gameBoard;\n\n    let categoriesSeen: string[] = []\n\n    //Iterate through questions\n    room.file.questions.forEach((question, index) => {\n\n        //Add columns - categories. Add to title column if haven't seen before.\n        if (!categoriesSeen.includes(question.category)){\n            gameBoard.columns.push({\n                title: question.category,\n                dataIndex: question.category,\n                key: question.category\n            });\n\n            categoriesSeen.push(question.category);\n        }\n\n    });\n\n    //Add row data - Loop through keys of object to do so\n    let valueIndexedQuestions = reformatQuestionsByValue(room.file.questions);\n    \n    for (const value in valueIndexedQuestions) {\n        if (valueIndexedQuestions.hasOwnProperty(value)) {\n            let rowObject: any = {} //If need to pass a key, pass it here\n            rowObject.key = uuidv4();\n            const questionsList = valueIndexedQuestions[value];\n            \n            questionsList.forEach((q: any) => {\n                rowObject[q.category] = value;\n            });\n\n            gameBoard.data.push(rowObject);\n        }\n    }\n\n    return gameBoard;\n}\n\nexport function reformatQuestionsByValue(questions: Question[]){\n    let obj: any = {}\n\n    //Reorder list by value\n    questions.forEach(question => {\n        !obj[question.value] ? obj[question.value] = [question] : obj[question.value].push(question)\n    });\n\n    return obj;\n}\n\nexport function extractCategories(questions: Question[]): String[] {\n    let categoriesSeen: string[] = []\n\n    //Iterate through questions and add category if haven't seen before\n    questions.forEach((question) => {\n        if (!categoriesSeen.includes(question.category)){\n            categoriesSeen.push(question.category);\n        }\n    });\n\n    return categoriesSeen;\n} ","import React, { CSSProperties } from 'react';\nimport { UpcomingQuestionModel } from '../../models/UpcomingQuestionModel';\n\n// Styles\nconst flexContainer = {\n  height: \"inherit\",\n  width: \"inherit\",\n  border: \"1px solid black\",\n  // // Use flex for this container\n  display: \"flex\",\n  flexDirection: \"column\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n} as CSSProperties\n\n\n\nexport default function UpcomingQuestion(upcomingQuestionModel: UpcomingQuestionModel) {\n\n  const {category, value} = upcomingQuestionModel\n  \n  // Should time be a configurable property? Not sure yet, wait till implementation details.\n\n  return (\n    <div style={flexContainer}>\n      <h1>{category}</h1>\n      <h1>${value}</h1>\n      <h1>Question will be shown in 3 seconds...</h1>\n    </div>\n  );\n}\n","import EventEmitter from \"wolfy87-eventemitter\";\n\n//Create an export global event emitter\nconst emitter = new EventEmitter();\nexport {emitter}","import React, { CSSProperties, useEffect, useState } from 'react';\nimport { GameQuestionModel } from '../../models/GameQuestionModel';\n\nimport { v4 as uuidv4 } from 'uuid';\nimport { PlayerGaveAnswer, PlayerAnsweredCorrectly, PlayerAnsweredIncorrectly, AllPlayerAnsweredIncorrectly } from '../../models/Events';\nimport { useGlobalContext } from '../../context/globalContext';\nimport { emitter } from '../../utils/EventEmitter';\n\n// Styles\nconst parentContainer = {\n  display: \"block\",\n  height: \"inherit\",\n  width: \"inherit\",\n}\n\nconst flexContainer = {\n  height: \"inherit\",\n  width: \"inherit\",\n  border: \"1px solid black\",\n  // // Use flex for this container\n  display: \"flex\",\n  flexDirection: \"column\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n} as CSSProperties\n\nconst answersFlexContainer = {\n  // When leave off width and height it shrinks the container to only the necessary size, no interior space/padding\n  display: \"flex\",\n  flexDirection: \"column\",\n} as CSSProperties\n\nconst notificationBox = {\n  display: \"flex\",\n  flexDirection: \"column\",\n  justifyContent: \"center\",\n} as CSSProperties\n\n\n\nexport default function GameQuestion(gameQuestionModel: GameQuestionModel) {\n\n  const { socket } = useGlobalContext();\n  const {question, answers} = gameQuestionModel\n\n  //State - declarative\n  let stableNotificationMessages: NotificationMessage[] = []\n  const [notificationMessages, setNotificationMessages] = useState<NotificationMessage[]>([])\n  \n  let answerListRef = React.createRef<HTMLOListElement>();\n  // Should time be a configurable property? Not sure yet, wait till implementation details.\n\n  // Have an internal mapping between numbers and letters?\n\n  // Should have in setup\n  useEffect(function(){\n    setUp()\n  }, [])\n\n  function setUp(){\n    //Add keypress listeners\n    document.addEventListener(\"keypress\", answerKeyPressListener);\n\n    //Add socket listeners\n    socket.on(\"playerAnsweredCorrectly\", handleCorrectAnswer);\n    socket.on(\"playerAnsweredIncorrectly\", handleIncorrectAnswer);\n    socket.on(\"allPlayersAnsweredIncorrectly\", handleAllIncorrectAnswers);\n  }\n\n  function handleCorrectAnswer(data: PlayerAnsweredCorrectly){\n    console.log(`${data.playerName} answered correctly with ${data.correctAnswer}`);\n\n    if (data.playerId === socket.id){\n      //This player answered correctly\n      setNotificationMessages(notificationMessages.concat(\n        [{\n          message: \"You answered correctly\",\n          color: \"green\"\n        }]\n      ))\n    }\n    else {\n      //Someone else answered correctly\n      let message: NotificationMessage = {\n        message: `${data.playerName} answered correctly with ${data.correctAnswer}`,\n        color: \"green\"\n      }\n\n      setNotificationMessages(notificationMessages.concat(\n        [message]\n      ))\n    }\n\n    //Emit event\n    console.log(\"Emitting game event: \", data.game)\n    emitter.emitEvent(\"playerAnsweredCorrectly\", [data.game])\n\n    /*For some reason, this only seems to show on one person's screen instead of all...\n    Maybe just opera? Or maybe since screen was open the component didn't update idk...*/\n    highlightAnswer(data.correctAnswer, true)\n  }\n\n  function handleIncorrectAnswer(data: PlayerAnsweredIncorrectly){\n    console.log(`${data.playerName} answered incorrectly`);\n\n    highlightAnswer(data.incorrectAnswer, false)\n\n    if (data.playerId === socket.id){\n      //This player answered in incorrectly\n      stableNotificationMessages = stableNotificationMessages.concat(\n        [{\n          message: \"You answered incorrectly\",\n          color: \"red\"\n        }]\n      )\n      setNotificationMessages(stableNotificationMessages)\n    }\n    else {\n      //Someone else answered incorrectly\n      stableNotificationMessages = stableNotificationMessages.concat(\n        [{\n          message: `${data.playerName} answered incorrectly`,\n          color: \"red\"\n        }]\n      )\n      setNotificationMessages(stableNotificationMessages)\n    }\n\n    //Emit event. Event should be playerReceivedAnswerFeedback, not updateScoreBoard. Will be consumed by scoreboard though.\n    console.log(\"Emitting game event: \", data.game)\n    emitter.emitEvent(\"playerAnsweredIncorrectly\", [data.game])\n\n  }\n\n  function handleAllIncorrectAnswers(data: AllPlayerAnsweredIncorrectly){\n    console.log(`All players answered incorrectly. The correct answer is ${data.correctAnswer}`);\n    //All players answered incorrectly, show correct answer choice\n    highlightAnswer(data.correctAnswer, true)\n\n    setNotificationMessages(stableNotificationMessages.concat(\n      [{\n        message: `All players answered incorrectly. The correct answer is ${data.correctAnswer}`,\n        color: \"red\"\n      }]\n    ))\n\n    //Emit event to update scoreboard\n    console.log(\"Emitting game event: \", data.game)\n    emitter.emitEvent(\"allPlayersAnsweredIncorrectly\", [data.game])\n    \n  }\n\n  function highlightAnswer(answerChoice: string, isCorrect: boolean){\n    let number: number = letterToNumber(answerChoice);\n\n    if (answerListRef.current != null) {\n      if (isCorrect){\n        answerListRef.current.children[number-1].classList.add(\"correct\")\n      }\n      else {\n        answerListRef.current.children[number-1].classList.add(\"incorrect\")\n      }\n    }\n  }\n\n  function answerKeyPressListener(event: KeyboardEvent){\n    //Get key pressed\n    let keyCodePressed = event.which || event.keyCode;\n    let stringKey = String.fromCharCode(keyCodePressed).toUpperCase();\n    console.log(\"Pressed: \", stringKey)\n\n    //Validate within options (1...X)\n    let numberPressed = -1;\n\n    try {\n      numberPressed = parseInt(stringKey); //Catch exception if not numeric key pressed\n    }\n    catch (exception){\n      alert(\"Must press a number key\")\n    }\n\n    let letterPressed = numberToLetter(numberPressed);\n    console.log(\"Letter Pressed: \", letterPressed)\n    console.log(\"Answers: \", answers)\n\n\n    if (!Object.keys(answers).includes(letterPressed)){\n      //If not a valid numeric choice\n      alert(`${numberPressed} not in answer choices`)\n    }\n\n    //Convert to letter and emit answer\n    let gaveAnswerEvent: PlayerGaveAnswer = {\n      answer: letterPressed\n    }\n\n    socket.emit(\"playerGaveAnswer\", gaveAnswerEvent)\n\n  }\n\n  function removeAnswerKeyPressListener(){\n    document.removeEventListener(\"keypress\", answerKeyPressListener);\n  }\n\n  function numberToLetter(number: number): string {\n    let alpha = \"0ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\n    //Return character at index\n    return alpha.charAt(number)\n  }\n\n  function letterToNumber(letter: string): number {\n    let alpha = \"0ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\n    //Return index, if not found will return -1. Future exception handling.\n    return alpha.indexOf(letter.toUpperCase());\n  }\n\n\n\n\n  return (\n    //This onKeyPress does not seem to be working. I guess just add on document as before.\n    <div style={parentContainer}>\n      <div style={flexContainer}>\n\n        <div style={answersFlexContainer}>\n          <h1>{question}</h1>\n    \n          <ol ref={answerListRef}>\n            {\n              Object.keys(answers).map((letterChoice) => (\n              <li key={uuidv4()}>{answers[letterChoice]}</li>\n              ))\n            }\n          </ol>\n          \n        </div>\n\n      </div>\n\n      <div style={notificationBox}>\n        {/* Could check if msgs is empty here if want to remove edge case out of notification. \n        I think best to have both in notification thought */}\n        <NotificationBox messages={notificationMessages}></NotificationBox>\n      </div>\n    </div>\n  );\n}\n\ntype NotificationBoxProps = {\n  messages: NotificationMessage[] | undefined;\n}\n\ntype NotificationMessage = {\n  message: string,\n  color: string, //html5 color codes\n}\n\nfunction NotificationBox(props: NotificationBoxProps){\n\n  let { messages } = props;\n  \n  return (\n    <div>\n      {\n        messages ?\n        messages.map((notificationMsg) => {\n          return <p key={uuidv4()}>{notificationMsg.message}</p>\n        })\n        :\n        \"There are no notifications.\"\n      }\n    </div>\n  )\n}","import React, { CSSProperties, useState, useEffect, MouseEvent } from 'react';\n\nimport { hardcodedScoreBoardColumns, hardcodedScoreBoardData, hardcodedGameBoardColumns, hardcodedGameBoardData } from '../models/HardcodedData'\nimport { RouteComponentProps } from 'react-router';\nimport { useGlobalContext } from '../context/globalContext';\nimport { RoomFrontendModel, RoomBackendModel, Player, Question, State } from '../models/Room';\nimport { UserJoinedGame, PlayerClickedGameCell } from '../models/Events';\nimport { ScoreBoardModel, convertRoomModelBE2ScoreBoard, GameBoardModel, convertRoomModelBE2GameBoard, reformatQuestionsByValue, extractCategories } from '../models/Game';\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { v4 as uuidv4 } from 'uuid';\nimport UpcomingQuestion from '../components/game/UpcomingQuestion';\nimport GameQuestion from '../components/game/GameQuestion';\nimport { emitter } from '../utils/EventEmitter';\n\n// Styles\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 650,\n  },\n  cell: {\n    border: \"1px solid black\",\n    borderCollapse: \"collapse\",\n  },\n  controller: {\n    backgroundColor: \"slateblue\"\n  },\n  blankCell: {\n    backgroundColor: \"white\",\n    color: \"white\",\n    cursor: \"no-drop\"\n  }\n});\n\nconst gridContainer = {\n  width: \"80VW\",\n  maxWidth: \"700px\",\n  // above makes 800px fixed but then 80VW if goes screen size goes under 800px.\",\n  height: \"80VH\",\n  display: \"grid\",\n  // gridTemplateAreas: \n  // `\n  //     \"scoreboard scoreboard scoreboard scoreboard\"\n  //     \"gameboard  gameboard  gameboard  gameboard\"\n  //     \"gameboard  gameboard  gameboard  gameboard\"\n  // `,\n  gridTemplateRows: \"1fr 3fr\", //1st item 25% row height 2nd 75% row height.\n  // margin: \"auto\", //This centers horizontally and seems to center children too.\n  // border: \"3px solid blue\",\n  // Below centers both \n  position: \"absolute\",\n  top: \"50%\",\n  left: \"50%\",\n  transform: \"translate(-50%, -50%)\"\n} as CSSProperties\n\nconst scoreBoardStyle = {\n  // gridArea: \"scoreboard\",\n  // border: \"3px solid black\",\n  // justifySelf: \"center\",\n  // alignSelf: \"center\"\n  // Use below to center and keep width\n  // width: \"100%\",\n  // position: \"absolute\",\n  // top: \"50%\",\n  // left: \"50%\",\n  // transform: \"translate(-50%, -50%)\"\n\n} as CSSProperties\n\nconst innerComponentStyle = {\n  // maxHeight: \"40VH\", //If want to limit question box height.\n  height: \"30VH\",\n} as CSSProperties\n\nconst gameBoardStyle = {\n  // gridArea: \"gameboard\",\n  // border: \"3px solid black\",\n  // width: \"50%\",\n  // justifySelf: \"center\",\n  // alignSelf: \"center\"\n  // position: \"absolute\",\n  // top: \"50%\",\n  // left: \"50%\",\n  // transform: \"translate(-50%, -50%)\"\n} as CSSProperties\n\n\nexport default function Game(routerState: RouteComponentProps) {\n  const { socket } = useGlobalContext();\n  const [game, setGame] = useState<RoomBackendModel>();\n  const [screen, setScreen] = useState<React.ReactNode>(<h1>Loading...</h1>); //Could look into typing further. Ex: <BoardScreen> | <AwaitingQuestion> | <Question> \n\n  //Initialization logic\n  useEffect(function(){\n    setUp();\n  }, [])\n\n  function setUp(){\n    //Hard cast since I expect this type\n    const game: RoomBackendModel = routerState.location.state as RoomBackendModel\n\n    setGame(game);\n    setScreen(<BoardScreen players={game.players} questions={game.file.questions}></BoardScreen>)\n\n    //Add listener for moving to question screen - All transition listeners here? Or on component that will click from? \n    socket.on(\"showUpcomingQuestion\", renderUpcomingQuestionScreen)\n    socket.on(\"askQuestion\", renderQuestionScreen)\n    socket.on(\"showGameBoard\", renderGameBoard)\n    socket.on(\"gameOver\", handleGameOver)\n\n    //Add event emitter listeners. Seems possible to use addListeners and pass object to add multiple events to a listener.\n    emitter.addListener(\"playerAnsweredCorrectly\", updateGame)\n    emitter.addListener(\"playerAnsweredIncorrectly\", updateGame)\n    emitter.addListener(\"allPlayersAnsweredIncorrectly\", updateGame)\n\n  }\n\n  function updateGame(game: RoomBackendModel){\n    console.log(\"Updating game with...: \", game)\n    setGame(game)\n  }\n\n  function handleGameOver(winners: Player[]){\n    let winnerNames = winners.map((winner: Player) => {\n      return winner.name\n    })\n    console.log(\"Winners: \", winners)\n    alert(`Game over. Winners: ${winnerNames.join(\",\")}`)\n  }\n\n  //Screens\n  function renderUpcomingQuestionScreen(question: Question){\n    console.log(\"Rendering upcoming question screen...\")\n\n    let questionScreen = <UpcomingQuestion category={question.category} value={parseInt(question.value)}/>\n    \n    setScreen(questionScreen);\n    \n  }\n\n  function renderQuestionScreen(question: Question){\n    console.log(\"Rendering question screen...\")\n\n    setScreen(<GameQuestion question={question.question} answers={question.answers}/>);\n    \n  }\n\n  function renderGameBoard(game: RoomBackendModel){\n    console.log(\"Rendering game board screen...\")\n\n    setScreen(<BoardScreen players={game.players} questions={game.file.questions}></BoardScreen>);\n    \n  }\n\n\n  if (!game){\n    return <h1>Loading..</h1>;\n  }\n\n  return (\n    // eslint-disable-next-line no-restricted-globals\n    <div style={gridContainer}>\n      <div style={scoreBoardStyle}>\n        <ScoreBoard players={game.players} controllingPlayerId={game.controllingPlayerId}></ScoreBoard>\n      </div>\n\n      <div style={innerComponentStyle}>\n        {screen}\n      </div>\n    </div>\n  )\n\n}\n\n//Could subcomponents below go into a different file or need in same file for global game state?\ntype BoardProps = {\n  players: Player[], \n  questions: Question[]\n};\n\nfunction BoardScreen(props: BoardProps){\n\n  const { players, questions } = props;\n\n  return (\n    <div style={gameBoardStyle}>\n      <GameBoard {...questions}></GameBoard>\n    </div>\n  );\n\n}\n\nfunction GameBoard(questions: Question[]){\n  const { socket } = useGlobalContext();\n\n  //Functions\n  function clickedGameCell(category: string, value: string, event: MouseEvent<HTMLTableDataCellElement>){\n    console.log(`ClickedGameCell: ${category} ${value}`)\n  \n    //Emit clicked question\n    let clickCellEvent: PlayerClickedGameCell = {\n      category: category,\n      value: value\n    }\n  \n    socket.emit(\"playerClickedGameCell\", clickCellEvent)\n  \n    /*Add disabled class to specific game cell (e.target?) - NVM instead of doing it here.. \n    do it on the classes. Check if the question has been answered and then render */\n\n  }\n\n  // Use material ui table\n  const classes = useStyles();\n\n  //For some strange reason when passed in questions becomes an object, not an array. Change it back.\n  questions = Object.values(questions);\n\n  //Get unique list of categories - TODO Future: Sort alphabetically, needed to ensure correct mappings.\n  let categories: String[] = extractCategories(questions)\n\n  //Reformat questions to be by value - TODO Future: Sort alphabetically, needed to ensure correct mappings.\n  let valueIndexedQuestions = reformatQuestionsByValue(questions)\n\n  return (\n    <TableContainer component={Paper}>\n      <Table className={classes.table} aria-label=\"simple table\">\n        <TableHead>\n          <TableRow>\n            {\n              categories.map((category) => {\n                return <TableCell key={uuidv4()} className={classes.cell} align=\"center\">{category}</TableCell>\n              })\n            }\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {\n            Object.keys(valueIndexedQuestions).map((amountKey) => (\n              <TableRow key={uuidv4()}>\n                {\n                  valueIndexedQuestions[amountKey].map((item: any) => {\n                    let classNm = item.hasBeenAnswered ? `${classes.cell} ${classes.blankCell}` : classes.cell;\n                    return <TableCell key={uuidv4()} className={classNm} align=\"center\" onClick={clickedGameCell.bind(clickedGameCell, item.category, item.value)}>${item.value}</TableCell>\n                  })\n                }\n              </TableRow>\n            ))\n          }\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n}\n\n\ntype ScoreBoardProps = {\n  players: Player[], \n  controllingPlayerId: string\n};\n\nfunction ScoreBoard(props: ScoreBoardProps){\n\n  let { players, controllingPlayerId } = props;  \n\n  // Use material ui table\n  const classes = useStyles();\n\n  //For some strange reason when passed in players becomes an object, not an array. Change it back.\n  // players = Object.values(players);\n\n  return (\n    <TableContainer component={Paper}>\n      <Table className={classes.table} aria-label=\"simple table\">\n        <TableHead>\n          <TableRow>\n            {\n              players.map((player: Player, index: number) => {\n                  console.log(\"player.id: \", player.id, \"controllerId: \", controllingPlayerId);\n                  let classNm = player.id === controllingPlayerId ? `${classes.cell} ${classes.controller}` : classes.cell;\n                  return <TableCell key={uuidv4()} className={ classNm } align=\"center\">{player.name}</TableCell>\n              })\n            }\n          </TableRow>\n        </TableHead>\n        <TableBody>\n            {\n              players.map((player: Player, index: number) => (\n                  <TableCell key={uuidv4()} className={classes.cell} align=\"center\">${player.score}</TableCell>\n              ))\n            }\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n}","export type UpcomingQuestionModel = {\n    category: String\n    value: Number\n}\n\nexport const defaultUpcoming: UpcomingQuestionModel = {\n    category: \"Default\",\n    value: 400\n}","export type GameQuestionModel = {\n    question: String\n    answers: Answer\n}\n\nexport const defaultGameQuestion: GameQuestionModel = {\n    question: \"Who was the first woman?\",\n    answers: {\n        \"A\": \"Abel\",\n        \"B\": \"Leah\",\n        \"C\": \"Rachel\",\n        \"D\": \"Eve\"\n    }\n}\n\ninterface Answer {\n    // This is syntax for when definining a hashmap type.\n    [key: string] : string;\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />, \n    document.getElementById('root')\n);","import './App.css'\n\nimport React from 'react'\nimport {BrowserRouter, Route} from 'react-router-dom'\nimport Home from './screens/Home'\nimport Lobby from './screens/Lobby'\nimport CreateRoom from './screens/CreateRoom'\nimport WaitingRoom from './screens/WaitingRoom'\nimport Game from './screens/Game'\nimport UpcomingQuestion from './components/game/UpcomingQuestion'\nimport { defaultUpcoming } from './models/UpcomingQuestionModel'\nimport GameQuestion from './components/game/GameQuestion'\nimport { defaultGameQuestion } from './models/GameQuestionModel'\nimport { GlobalContextProvider } from './context/globalContext'\n\nexport default function App(){\n    return (\n\n      <GlobalContextProvider>\n        {/* // Use browser router instead of router for website (as opposed to mobile app) routing. */}\n        <BrowserRouter>\n\n          {/* ADD ALL PATHS FOR THE APP HERE. INCLUDING NESTED PATHS i.e /register/student */}\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/lobby\" component={Lobby} />\n          <Route exact path=\"/create-room\" component={CreateRoom} />\n          <Route exact path=\"/waiting-room\" component={WaitingRoom} />\n          <Route exact path=\"/game-board\" component={Game} />\n\n\n          {/* TESTING COMPONENTS that later may not have own routes */}\n          {/* <Route exact path=\"/upcoming-question\"><UpcomingQuestion category=\"Default\" value={200}/></Route> */}\n          <Route exact path=\"/upcoming-question\"><UpcomingQuestion {...defaultUpcoming}/></Route>\n          <Route exact path=\"/game-question\"><GameQuestion {...defaultGameQuestion}/></Route>\n\n          {/* Use Link to get to the route whenever needed from anywhere */}\n\n        </BrowserRouter>\n      </GlobalContextProvider>\n    )\n}"],"sourceRoot":""}